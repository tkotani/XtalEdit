========== csymtool ===================

csym can generate space-group symmetry operations(SYMOP) for given crystal structure
, which is specified just only by site positions and primitive vectors.
It adds additional SYMOP which is not supplied at first.

It also can add new sites if you want to respect given SYMOPS.
So this means that you can set up crystal structure just from
SYMOPS and un-equivalent site positions.

This package contains slatsm/ and subs/.
These contains source codes taken from lmto package, SLATSM.42.tar.gz
and ASA.6.12a.tar.gz, which are organized by Mark van Schilfgaarde.
Main part of routines are originally from LMTO package 
in Andersen's group in MPI Stuttgart.

I and collabolators are tring to develop an unified user interface
(GUI and CUI) for crystal modelling for ab-initio 
electronic structure calcualtion based on this.

Takao kotani


===============================================================
Installation.
>make 
at csymtool/ directory.
You need to fortran compilar(f77).
In addition, you have to set timer in src/slatsm/cpudel.f if you hope.
Then run make, which generate csym.

The binary csym readin cryst.in and write cryst.out and SYMOP.out.
input file : 
  cryst.in
output files:
  cryst.out
  SYMOP.out : SYMOP gives opetations. coodinate transformation in Cartesian is
              r'(1:3) = matmul(g(1:3,1:3),r(1:3)) + ag(1:3)
  standard output: containing neighbor-pair informations.
At first, you have to prepare cryst.in.
Then you can run csym. It recognize no arguments and no standard input.
It just readin cryst.in only.

The format of cryst.in and csyst.out is the same.
So you can rename cryst.out as cryst.in for successive procedure.
A sample of cryst.in is
------------------------------------------------------------
     1  !mode switch for computation. Next line is generators
                 r2(1,0,-1)
         8.77 !alat 
         0.50000       0.50000      1.00000  !prvec1 
         0.50000       1.00000      0.50000  !prvec2 
         1.00000       0.50000      0.50000  !prvec3 
     3  !nbas 
         0.00000        0.0000        0.00000    1 !bas site_type for site    1
         2.50000        2.0000        2.50000    2 !bas site_type for site    2
         0.50000        0.5000        0.50000    3 !bas site_type for site    3
     3  ! ntyp 
        Mnup         1.0  ! Name MT_radius for site_type    1
        Mndn         1.0  ! Name MT_radius for site_type    2
        O(1)         1.0  ! Name MT_radius for site_type    3
-------------------------------------------------------
At first, this file is readin free format in fortran.
So you don't need to care number of digits.
bas is in Cartesian coodinate.
alat and MT_radius

The 1st line gives computational mode.
 mode = 0 !Search site positions for given generator.
          !Then find additional symmetry generator.
          !You can start from no given generators 
      = 1 !Search site positions for given generator.
      = 2 !Check consistency. Use given symmetry generator.
With this mode, it generate cryst.out.

The 2nd line is for generators.All the generators should be in the second line.
The generatos can be overcomplete. Even when you search generators from
the begining, you have to keep this as an empty line.
See Generators: below.

The 3rd line is the scale in (a.u.). 
Primitive vectors and site positions, are in this unit. 
As for cryst.out, this alat is essentially meaningless.
But it affects on neibor-pair analysis in standard output. 

The 4-th line to 6-th line are for primitive vectors in unit alat.

The 7-th line coantains nbas. It is number of inequivalent site positions.

The 7+1  line to 7+nbas-th line are for positions of sites and site_type(number).
They are in Cartesian.

The next line is ntype (it is reffered as nclass in lmto), 
the nuber of site_type. And the following ntyp lines are
define site_type names and MT_radius (in a.u.).
If you don't need to know MT_radius overlapping info shown in standard output,
you can set tehm as zero.

Actually, you don't need to stick to a.u. for alat and MT_radius---
it is not a matter whether you take results as a.u. or Angstrome.


===========================================================
TEST:
Copy samples of crystr.in.* to crystr.in and do ./csym.
Then change modes and so on...


=======================================================
Generators:
The generators should be written in the format used 
in LMTO packages, originally in Anderson group in MPI Stuttgart.

A symbol describing a generator for a point group operation has
the form O(nx,ny,nz) where O is one of M, I or Rj for mirror,
inversion and j-fold rotation; and nx,ny,nz are a triplet of
indices specifying the axis of operation.  It can be integer 
or real numbers. You may use X, Y, Z or
D as shorthand for (1,0,0), (0,1,0), (0,0,1), (1,1,1).  
You may also enter products, such as I*R4X.

As for space-group operation, we have to add translation
after rotation in some cases. 
They should be given by appending a string in the
form `::(p1,p2,p3)' to the point group operation.
These defines the translation \Delta
in prvec(1:3,1),prvec(1:3,2),prvec(1:3,3) in unit alat.
\Delta(1:3) = p1*prvec(1:3,1) +p2*prvec(1:3,2) + p3*prvec((1:3,3)
Parser routine is subs/psymop.f 
An example for Si is
    i*r3(1,1,-1)::(1/4,1/4,1/4) r4x::(1/4,1/4,1/4)

ag in SYMOPS.ops is in Cartasian.
So ag(1:3) = \Delta(1:3) = p1*prvec(1:3,1) +p2*prvec(1:3,2) + p3*prvec((1:3,3)
=======================================================




