      subroutine packi(lpack,scall,struc,listi,nlisti,x1,x2,x3,x4,x5)
C- Pack/unpack integer or double precision elements in a struc by index
Ci ----------------------------------------------------------------
Ci Inputs
Ci   lpack  1s digit 
Ci           0 unpacks, 1 pack, 2 return output of scall; see Remarks
Ci         10s digit 
Ci           0 structure has no species index
Ci          10 structure has a species index
Ci   scall   subroutine name that returns offset, cast and no. elts.
Ci   listi   list of elements to unpack
Ci   nlisti  number of elements to unpack
Ci   x1      (lpack 10s digit=1) is species index
Cio Inputs/Outputs 
Cio  struc   structure
Cio  x1..x5  (or x2..x5, for struc with a species index) 
Cio          elements to pack/unpack
Co   x1..x3  (lpack=2) or x2..x4 (lpack=12) are filled with struc offsets,
Co           casts, and number of entries for each element.  These
Co           quantities are generated by subroutine scall.
Cr Remarks
Cr   packi packs/upacks between list of up to 5 elements into (out of)
Cr   structure 'struc'.  The structure-specific information it requires, 
Cr   (offset, cast and number of entries for a given element), by
Cr   calling routine 'scall', whose name is passed to packi.  scall
Cr   must have a standard argument list, which for lpack>=10 is
Cr     subroutine scall(struc,listi,nlisti,is,offset,cast,nelt)
Cr   or if lpack<10:
Cr     subroutine scall(struc,listi,nlisti,offset,cast,nelt)
C ----------------------------------------------------------------
C     implicit none
      integer lpack,listi(nlisti),nlisti,x1(1),x2(1),x3(1),x4(1),x5(1)
      double precision struc(1)
      external scall
C Local variables
      integer offi(20),casti(20),nelti(20),off,i,ix

C ... Get the list of offsets,casts,number of entries 
      if (lpack .eq. 2) then
        call scall(struc,listi,nlisti,x1,x2,x3)
        return
      elseif (lpack .eq. 12) then
        call scall(struc,listi,nlisti,x1,x2,x3,x4)
        return
      elseif (lpack .ge. 10) then
        call scall(struc,listi,nlisti,x1,offi,casti,nelti)
        off = nint(struc(1))*(x1(1)-1)
        ix = 1
      else
        call scall(struc,listi,nlisti,offi,casti,nelti)
        ix = 0
        off = 0
      endif
C ... Pack or unpack it
      do  10  i = 1, nlisti
        if (mod(lpack,10) .eq. 0) then
          call peekx(nelti(i),1,1,i+ix,casti(i),x1,x2,x3,x4,x5,
     .      struc(offi(i)+off))
        else
          call pokex(nelti(i),1,1,i+ix,casti(i),x1,x2,x3,x4,x5,
     .      struc(offi(i)+off))
        endif
   10 continue

      end
      subroutine pokex(n,ni,nx,ix,cast,x1,x2,x3,x4,x5,xx)
C- Copies one of arrays x1..x5 into double xx
C ----------------------------------------------------------------
Ci Inputs
Ci   n        number of elements to copy
Ci   ni,nx    offsets for x1..5 and xx
Ci   ix       which of x1..x5 to copy
Ci   cast     2  x1..x5 are integer
Ci            4  x1..x5 are double
Ci   x1..x5   one of these is copied into xx
Co Outputs
Co   xx       n elements copied into double xx
C ----------------------------------------------------------------
C     implicit none
      integer n,ni,nx,ix,cast
      double precision x1(n),x2(n),x3(n),x4(n),x5(n),xx(n)

      if (cast .eq. 2) then
        if (ix .eq. 1) call idscop(x1,xx,n,ni,nx)
        if (ix .eq. 2) call idscop(x2,xx,n,ni,nx)
        if (ix .eq. 3) call idscop(x3,xx,n,ni,nx)
        if (ix .eq. 4) call idscop(x4,xx,n,ni,nx)
        if (ix .eq. 5) call idscop(x5,xx,n,ni,nx)
      else
        if (ix .eq. 1) call dpscop(x1,xx,n,ni,nx,1d0)
        if (ix .eq. 2) call dpscop(x2,xx,n,ni,nx,1d0)
        if (ix .eq. 3) call dpscop(x3,xx,n,ni,nx,1d0)
        if (ix .eq. 4) call dpscop(x4,xx,n,ni,nx,1d0)
        if (ix .eq. 5) call dpscop(x5,xx,n,ni,nx,1d0)
      endif
      end
      subroutine peekx(n,ni,nx,ix,cast,x1,x2,x3,x4,x5,xx)
C- Copies double xx into one of arrays x1..x5
C ----------------------------------------------------------------
Ci Inputs
Ci   n        number of elements to copy
Ci   ni,nx    offsets for x1..5 and xx
Ci   ix       which of x1..x5 to copy
Ci   cast     2  x1..x5 are integer
Ci            4  x1..x5 are double
Co   xx       n elements copied from double xx
Co Outputs
Ci   x1..x5   one of these is copied into oneof x1..x5
C ----------------------------------------------------------------
C     implicit none
      integer n,ni,nx,ix,cast
      double precision x1(n),x2(n),x3(n),x4(n),x5(n),xx(n)

      if (cast .eq. 2) then
        if (ix .eq. 1) call discop(xx,x1,n,nx,ni,1)
        if (ix .eq. 2) call discop(xx,x2,n,nx,ni,1)
        if (ix .eq. 3) call discop(xx,x3,n,nx,ni,1)
        if (ix .eq. 4) call discop(xx,x4,n,nx,ni,1)
        if (ix .eq. 5) call discop(xx,x5,n,nx,ni,1)
      else
        if (ix .eq. 1) call dpscop(xx,x1,n,nx,ni,1d0)
        if (ix .eq. 2) call dpscop(xx,x2,n,nx,ni,1d0)
        if (ix .eq. 3) call dpscop(xx,x3,n,nx,ni,1d0)
        if (ix .eq. 4) call dpscop(xx,x4,n,nx,ni,1d0)
        if (ix .eq. 5) call dpscop(xx,x5,n,nx,ni,1d0)
      endif
      end
